df_combined[[i]][merge_status == "in shpfile but not WHO", ADM1_NAME.shpfile := ADM1_NAME]
#sort out location in WHO which never get match (regular and fuzzy match)
df_who_miss[[i]] <- unique(df_combined[[i]], by= c("who_coverage", "ADM1_NAME.who"))
#sort out location in shapefile which not get mactch with WHO location
df_shp_miss[[i]] <- unique(df_combined[[i]], by = c("ADM1_NAME.shpfile", "GAUL_CODE"))
#final data set with matching
df_combined_final[[i]] <- rbind(df_combined[[i]][!(merge_status %in% c("in WHO but not shpfile", "in shpfile but not WHO"))], df_who_miss[[i]][merge_status == "in WHO but not shpfile",], df_shp_miss[[i]][merge_status == "in shpfile but not WHO"])
}
return(df_combined_final)
}
gaul_adm1Match <- matching_admin1(adm1_gaul_countries, df_gl1, "osa")
View(gaul_adm1Match)
#--------------------------------------------------------------Name matching adm1---------------------------------------------------------------------------#
matching_admin1 <- function(countries, shapefile, fuzMethod){
df_combined <- list()
df_who_only <- list()
df_shpfile_only <- list()
df_success <- list()
df_fuzzy <- list()
df_fuzzy_fix <- list()
df_fuzzy_exact <- list()
df_who_miss <- list()
df_shp_miss <- list()
df_combined_final <- list()
# start the for loop matching for all african countries using gadm shapefile
for (i in 1 : length(countries)){
df_combined[[i]]<- merge(df_who[ADM0_NAME == countries[i]], shapefile[ADM0_NAME == countries[i]], by = c("ADM1_NAME"), all.x = T, all.y = T)
#regular match status
df_combined[[i]][!is.na(who_coverage) & !is.na(GAUL_CODE), merge_status := "success"]
df_combined[[i]][!is.na(who_coverage) & is.na(GAUL_CODE), merge_status := "in WHO but not shpfile"]
df_combined[[i]][is.na(who_coverage) & !is.na(GAUL_CODE), merge_status := "in shpfile but not WHO"]
#subset each status to different list for fuzzy match
df_who_only[[i]] <- subset(df_combined[[i]], merge_status == "in WHO but not shpfile")
df_shpfile_only[[i]] <- subset(df_combined[[i]], merge_status == "in shpfile but not WHO")
df_success[[i]] <- subset(df_combined[[i]], merge_status == "success")
#fuzzy match
df_fuzzy[[i]] <- stringdist_join(subset(df_who_only[[i]], select = c(1:6)), subset(df_shpfile_only[[i]], select = c(1,7,8,9)), by = "ADM1_NAME", method = fuzMethod)
df_fuzzy[[i]]$merge_status <- NA
#identify fuzzy match with more than 1 match
for (j in 1:(nrow(df_fuzzy[[1]])-1)){
# first if statement make sure we have at least 2 fuzzy match so that the second if statement makes sense
if  (nrow(df_fuzzy[[i]]) <= 1){
next
} else if (df_fuzzy[[i]]$ADM1_NAME.x[j] == df_fuzzy[[i]]$ADM1_NAME.x[j+1]) {
df_fuzzy[[i]]$merge_status[j] <- "fuzzy need fix"
df_fuzzy[[i]]$merge_status[j+1] <- "fuzzy need fix"
}
}
df_fuzzy_fix[[i]] <- df_fuzzy[[i]][merge_status == "fuzzy need fix"]
setnames(df_fuzzy_fix[[i]], c("ADM1_NAME.x", "ADM1_NAME.y"), c("ADM1_NAME.who", "ADM1_NAME.shpfile"))
# fuzzy match with only one shapefile location will have NA on merge status
df_fuzzy_exact[[i]] <- df_fuzzy[[i]][is.na(merge_status)]
setnames(df_fuzzy_exact[[i]], c("ADM1_NAME.x", "ADM1_NAME.y"), c("ADM1_NAME.who", "ADM1_NAME.shpfile"))
df_combined[[i]] <- rbind(df_success[[i]], df_fuzzy_fix[[i]], df_fuzzy_exact[[i]], df_who_only[[i]], fill = TRUE)
df_combined[[i]][is.na(merge_status), merge_status := "fuzzy success"]
df_combined[[i]][is.na(ADM1_NAME.who), ADM1_NAME.who := ADM1_NAME]
# for location in shapefile but do not get match in who location
df_combined[[i]] <- rbind(df_combined[[i]], df_shpfile_only[[i]], fill = T)
df_combined[[i]][merge_status == "in shpfile but not WHO", ADM1_NAME.shpfile := ADM1_NAME]
#sort out location in WHO which never get match (regular and fuzzy match)
df_who_miss[[i]] <- unique(df_combined[[i]], by= c("who_coverage", "ADM1_NAME.who"))
#sort out location in shapefile which not get mactch with WHO location
df_shp_miss[[i]] <- unique(df_combined[[i]], by = c("ADM1_NAME.shpfile", "GAUL_CODE"))
#final data set with matching
df_combined_final[[i]] <- rbind(df_combined[[i]][!(merge_status %in% c("in WHO but not shpfile", "in shpfile but not WHO"))], df_who_miss[[i]][merge_status == "in WHO but not shpfile",], df_shp_miss[[i]][merge_status == "in shpfile but not WHO"])
}
return(df_combined_final)
}
gaul_adm1Match <- matching_admin1(adm1_gaul_countries, df_gl1, "osa")
View(gaul_adm1Match)
gaul_adm1Match <- matching_admin1(c("Algeria"), df_gl1, "osa")
View(gaul_adm1Match)
View(gaul_adm1Match)
gaul_adm1Match <- matching_admin1(adm1_gaul_countries, df_gl1, "osa")
View(gaul_adm1Match)
gaul_adm1Match <- dataTable(gaul_adm1Match)
dataTable <- function (list){
final_df <- c()
for (i in 1:(length(list))){
final_df <- rbind(final_df, list[[i]])
}
#setnames(final_df, c("ADM1_NAME.x", "ADM1_NAME.y"), c("ADM1_NAME.who", "ADM1_NAME.shpfile"))
#final_df <- final_df[,c(1:5,7,10,11,12,14,15,13,6)]
return (final_df)
}
gaul_adm1Match <- dataTable(gaul_adm1Match)
View(gaul_adm1Match)
input_dir <- "C:/Users/nqviet94/Documents/IHME/Work/Vaccine (local)/WHO_Subnational_Immunization_Coverage_data/2016/"
#load gadm and gaul matching shapefile
df_gaul <- fread(paste0(input_dir, "remaining_adm2_gadm.csv"))
df_gadm <- fread(paste0(input_dir, "remaining_adm2_gl.csv"))
#remove duplicate in fuzzy need fix
df_gaul <- df_gaul[Note != "r", ]
df_gadm <- df_gadm[Note != "r", ]
# for wrong fuzzy match, change merge status to need change
df_gadm <- df_gadm[Note == "change", merge_status := "need change"]
df_gaul <- df_gaul[Note == "change", merge_status := "need change"]
# for manual add location, change merge status to fuzzy success
df_gadm <- df_gadm[Note %in% c("manual add","match"), merge_status := "manually match"]
df_gaul <- df_gaul[Note %in% c("manual add", "match"), merge_status := "manually match"]
library(data.table)
library(magrittr)
library(fuzzyjoin)
library(stringdist)
input_dir <- "C:/Users/nqviet94/Documents/IHME/Work/Vaccine (local)/WHO_Subnational_Immunization_Coverage_data/2016/"
#load gadm and gaul matching shapefile
df_gaul <- fread(paste0(input_dir, "remaining_adm2_gadm.csv"))
df_gadm <- fread(paste0(input_dir, "remaining_adm2_gl.csv"))
#remove duplicate in fuzzy need fix
df_gaul <- df_gaul[Note != "r", ]
df_gadm <- df_gadm[Note != "r", ]
# for wrong fuzzy match, change merge status to need change
df_gadm <- df_gadm[Note == "change", merge_status := "need change"]
df_gaul <- df_gaul[Note == "change", merge_status := "need change"]
# for manual add location, change merge status to fuzzy success
df_gadm <- df_gadm[Note %in% c("manual add","match"), merge_status := "manually match"]
df_gaul <- df_gaul[Note %in% c("manual add", "match"), merge_status := "manually match"]
View(df_gadm)
#remove duplicate in fuzzy need fix
df_gaul <- df_gaul[Note != "r", ]
class(df_gaul)
View(df_gaul)
View(df_gadm)
df_gaul <- fread(paste0(input_dir, "remaining_adm2_gl.csv"))
df_gadm <- fread(paste0(input_dir, "remaining_adm2_gadm.csv"))
#remove duplicate in fuzzy need fix
df_gaul <- df_gaul[Note != "r", ]
df_gadm <- df_gadm[Note != "r", ]
df_gadm <- df_gadm[Note == "change", merge_status := "need change"]
df_gaul <- df_gaul[Note == "change", merge_status := "need change"]
# for manual add location, change merge status to fuzzy success
df_gadm <- df_gadm[Note %in% c("manual add","match"), merge_status := "manually match"]
df_gaul <- df_gaul[Note %in% c("manual add", "match"), merge_status := "manually match"]
gaul_afr_countries <- unique(df_gaul$ADM0_NAME.x)
gadm_afr_countries <- unique(df_gadm$ADM0_NAME.x)
percent_not_match_gaul <- c()
for (i in 1:length(gaul_afr_countries)){
percent_not_match_gaul[i] <- nrow(df_gaul[!(merge_status %in% c("in WHO but not shpfile", "need change")) & ADM0_NAME.x == gaul_afr_countries[i]])*100/nrow(df_gaul[ADM0_NAME.x == gaul_afr_countries[i]])
}
percent_not_match_gaul <- as.data.table(cbind(gaul_afr_countries, percent_not_match_gaul))
percent_not_match_gadm <- c()
for (i in 1:length(gadm_afr_countries)){
percent_not_match_gadm[i] <- nrow(df_gadm[!(merge_status %in% c("in WHO but not shpfile", "need change")) & ADM0_NAME.x == gadm_afr_countries[i]])*100/nrow(df_gadm[ADM0_NAME.x == gadm_afr_countries[i]])
}
percent_not_match_gadm <- as.data.table(cbind(gadm_afr_countries, percent_not_match_gadm))
View(percent_not_match_gaul)
View(percent_not_match_gadm)
View(df_gadm)
df_gadm <- fread(paste0(input_dir, "remaining_adm2_gadm.csv"))
View(df_gadm)
df_gadm <- df_gadm[Note != "r", ]
#load gadm and gaul matching shapefile
df_gaul <- fread(paste0(input_dir, "remaining_adm2_gl.csv"))
#remove duplicate in fuzzy need fix
df_gaul <- df_gaul[Note != "r", ]
df_gadm <- fread(paste0(input_dir, "remaining_adm2_gadm.csv"))
df_gadm <- df_gadm[Note == "change", merge_status := "need change"]
df_gaul <- df_gaul[Note == "change", merge_status := "need change"]
# for manual add location, change merge status to fuzzy success
df_gadm <- df_gadm[Note %in% c("manual add","match"), merge_status := "manually match"]
df_gaul <- df_gaul[Note %in% c("manual add", "match"), merge_status := "manually match"]
gaul_afr_countries <- unique(df_gaul$ADM0_NAME.x)
gadm_afr_countries <- unique(df_gadm$ADM0_NAME.x)
percent_not_match_gaul <- c()
for (i in 1:length(gaul_afr_countries)){
percent_not_match_gaul[i] <- nrow(df_gaul[!(merge_status %in% c("in WHO but not shpfile", "need change")) & ADM0_NAME.x == gaul_afr_countries[i]])*100/nrow(df_gaul[ADM0_NAME.x == gaul_afr_countries[i]])
}
percent_not_match_gaul <- as.data.table(cbind(gaul_afr_countries, percent_not_match_gaul))
percent_not_match_gadm <- c()
for (i in 1:length(gadm_afr_countries)){
percent_not_match_gadm[i] <- nrow(df_gadm[!(merge_status %in% c("in WHO but not shpfile", "need change")) & ADM0_NAME.x == gadm_afr_countries[i]])*100/nrow(df_gadm[ADM0_NAME.x == gadm_afr_countries[i]])
}
percent_not_match_gadm <- as.data.table(cbind(gadm_afr_countries, percent_not_match_gadm))
View(percent_not_match_gadm)
View(percent_not_match_gaul)
View(df_gaul)
View(df_gadm)
df_gaul <- unique(df_gaul, by= c("ADM2_NAME.who", "vaccine", "who_coverage", "ADM2_NAME.shpfile" ))
df_gadm <- unique(df_gadm, by= c("ADM2_NAME.who", "vaccine", "who_coverage", "ADM2_NAME.shpfile" ))
write.csv(df_gaul[,-1], "C:/Users/nqviet94/Documents/IHME/Work/Vaccine (local)/WHO_Subnational_Immunization_Coverage_data/2016/remaining_adm2_matching2_Africa.csv")
write.csv(df_gadm[,-1], "C:/Users/nqviet94/Documents/IHME/Work/Vaccine (local)/WHO_Subnational_Immunization_Coverage_data/2016/remaining_adm2_matching2_Africa.csv")
write.csv(df_gaul[,-1], "C:/Users/nqviet94/Documents/IHME/Work/Vaccine (local)/WHO_Subnational_Immunization_Coverage_data/2016/remaining_adm2gaul_matching2_Africa.csv")
write.csv(df_gadm[,-1], "C:/Users/nqviet94/Documents/IHME/Work/Vaccine (local)/WHO_Subnational_Immunization_Coverage_data/2016/remaining_adm2gadm_matching2_Africa.csv")
View(gaul_adm1Match)
gadm_adm1Match <- matching_admin1(adm1_gadm_countries, df_gadm1, "osa")
gadm_adm1Match <- dataTable(gadm_adm1Match)
matching_admin1 <- function(countries, shapefile, fuzMethod){
df_combined <- list()
df_who_only <- list()
df_shpfile_only <- list()
df_success <- list()
df_fuzzy <- list()
df_fuzzy_fix <- list()
df_fuzzy_exact <- list()
df_who_miss <- list()
df_shp_miss <- list()
df_combined_final <- list()
# start the for loop matching for all african countries using gadm shapefile
for (i in 1 : length(countries)){
df_combined[[i]]<- merge(df_who[ADM0_NAME == countries[i]], shapefile[ADM0_NAME == countries[i]], by = c("ADM1_NAME"), all.x = T, all.y = T)
#regular match status
df_combined[[i]][!is.na(who_coverage) & !is.na(GAUL_CODE), merge_status := "success"]
df_combined[[i]][!is.na(who_coverage) & is.na(GAUL_CODE), merge_status := "in WHO but not shpfile"]
df_combined[[i]][is.na(who_coverage) & !is.na(GAUL_CODE), merge_status := "in shpfile but not WHO"]
#subset each status to different list for fuzzy match
df_who_only[[i]] <- subset(df_combined[[i]], merge_status == "in WHO but not shpfile")
df_shpfile_only[[i]] <- subset(df_combined[[i]], merge_status == "in shpfile but not WHO")
df_success[[i]] <- subset(df_combined[[i]], merge_status == "success")
#fuzzy match
df_fuzzy[[i]] <- stringdist_join(subset(df_who_only[[i]], select = c(1:6)), subset(df_shpfile_only[[i]], select = c(1,7,8,9)), by = "ADM1_NAME", method = fuzMethod)
df_fuzzy[[i]]$merge_status <- NA
#identify fuzzy match with more than 1 match
for (j in 1:(nrow(df_fuzzy[[1]])-1)){
# first if statement make sure we have at least 2 fuzzy match so that the second if statement makes sense
if  (nrow(df_fuzzy[[i]]) <= 1){
next
} else if (df_fuzzy[[i]]$ADM1_NAME.x[j] == df_fuzzy[[i]]$ADM1_NAME.x[j+1]) {
df_fuzzy[[i]]$merge_status[j] <- "fuzzy need fix"
df_fuzzy[[i]]$merge_status[j+1] <- "fuzzy need fix"
}
}
df_fuzzy_fix[[i]] <- df_fuzzy[[i]][merge_status == "fuzzy need fix"]
setnames(df_fuzzy_fix[[i]], c("ADM1_NAME.x", "ADM1_NAME.y"), c("ADM1_NAME.who", "ADM1_NAME.shpfile"))
# fuzzy match with only one shapefile location will have NA on merge status
df_fuzzy_exact[[i]] <- df_fuzzy[[i]][is.na(merge_status)]
setnames(df_fuzzy_exact[[i]], c("ADM1_NAME.x", "ADM1_NAME.y"), c("ADM1_NAME.who", "ADM1_NAME.shpfile"))
df_combined[[i]] <- rbind(df_success[[i]], df_fuzzy_fix[[i]], df_fuzzy_exact[[i]], df_who_only[[i]], fill = TRUE)
df_combined[[i]][is.na(merge_status), merge_status := "fuzzy success"]
df_combined[[i]][is.na(ADM1_NAME.who), ADM1_NAME.who := ADM1_NAME]
# for location in shapefile but do not get match in who location
df_combined[[i]] <- rbind(df_combined[[i]], df_shpfile_only[[i]], fill = T)
df_combined[[i]][merge_status == "in shpfile but not WHO", ADM1_NAME.shpfile := ADM1_NAME]
#sort out location in WHO which never get match (regular and fuzzy match)
df_who_miss[[i]] <- unique(df_combined[[i]], by= c("who_coverage", "ADM1_NAME.who"))
#sort out location in shapefile which not get mactch with WHO location
df_shp_miss[[i]] <- unique(df_combined[[i]], by = c("ADM1_NAME.shpfile", "GAUL_CODE"))
#final data set with matching
df_combined_final[[i]] <- rbind(df_combined[[i]][!(merge_status %in% c("in WHO but not shpfile", "in shpfile but not WHO"))], df_who_miss[[i]][merge_status == "in WHO but not shpfile",], df_shp_miss[[i]][merge_status == "in shpfile but not WHO"])
}
return(df_combined_final)
}
gaul_adm1Match <- matching_admin1(adm1_gaul_countries, df_gl1, "osa")
gaul_adm1Match <- dataTable(gaul_adm1Match)
gadm_adm1Match <- matching_admin1(adm1_gadm_countries, df_gadm1, "osa")
gadm_adm1Match <- dataTable(gadm_adm1Match)
write.csv(gaul_adm1Match, "C:/Users/nqviet94/Documents/IHME/Work/Vaccine (local)/WHO_Subnational_Immunization_Coverage_data/2016/matching_adm1_gaul_Africa.csv")
write.csv(gadm_adm1Match, "C:/Users/nqviet94/Documents/IHME/Work/Vaccine (local)/WHO_Subnational_Immunization_Coverage_data/2016/matching_adm1_gadm_Africa.csv")
df_gaul <- fread(paste0(input_dir, "matching_adm1_gadm_Africa.csv"))
df_gadm <- fread(paste0(input_dir, "matching_adm1_gaul_Africa.csv"))
df_gaul <- df_gaul[Note != "r", ]
df_gadm <- df_gadm[Note != "r", ]
df_gadm <- df_gadm[Note == "change", merge_status := "need change"]
df_gaul <- df_gaul[Note == "change", merge_status := "need change"]
df_gadm <- df_gadm[Note %in% c("manual add","match"), merge_status := "manually match"]
df_gaul <- df_gaul[Note %in% c("manual add", "match"), merge_status := "manually match"]
#load gadm and gaul matching shapefile
df_gaul <- fread(paste0(input_dir, "matching_adm1_gadm_Africa.csv"))
df_gadm <- fread(paste0(input_dir, "matching_adm1_gaul_Africa.csv"))
#remove duplicate in fuzzy need fix
df_gaul <- df_gaul[Note != "r", ]
df_gadm <- df_gadm[Note != "r", ]
# for wrong fuzzy match, change merge status to need change
df_gadm <- df_gadm[Note == "change", merge_status := "need change"]
df_gaul <- df_gaul[Note == "change", merge_status := "need change"]
# for manual add location, change merge status to fuzzy success
df_gadm <- df_gadm[Note %in% c("manual add","match"), merge_status := "manually match"]
df_gaul <- df_gaul[Note %in% c("manual add", "match"), merge_status := "manually match"]
gaul_afr_countries <- unique(df_gaul$ADM0_NAME.x)
gadm_afr_countries <- unique(df_gadm$ADM0_NAME.x)
percent_not_match_gaul <- c()
for (i in 1:length(gaul_afr_countries)){
percent_not_match_gaul[i] <- nrow(df_gaul[!(merge_status %in% c("in WHO but not shpfile", "need change")) & ADM0_NAME.x == gaul_afr_countries[i]])*100/nrow(df_gaul[ADM0_NAME.x == gaul_afr_countries[i]])
}
percent_not_match_gaul <- as.data.table(cbind(gaul_afr_countries, percent_not_match_gaul))
percent_not_match_gadm <- c()
for (i in 1:length(gadm_afr_countries)){
percent_not_match_gadm[i] <- nrow(df_gadm[!(merge_status %in% c("in WHO but not shpfile", "need change")) & ADM0_NAME.x == gadm_afr_countries[i]])*100/nrow(df_gadm[ADM0_NAME.x == gadm_afr_countries[i]])
}
percent_not_match_gadm <- as.data.table(cbind(gadm_afr_countries, percent_not_match_gadm))
View(percent_not_match_gadm)
View(percent_not_match_gaul)
df_gaul <- fread(paste0(input_dir, "matching_adm1_gaul_Africa.csv"))
df_gadm <- fread(paste0(input_dir, "matching_adm1_gadm_Africa.csv"))
#remove duplicate in fuzzy need fix
df_gaul <- df_gaul[Note != "r", ]
df_gadm <- df_gadm[Note != "r", ]
# for wrong fuzzy match, change merge status to need change
df_gadm <- df_gadm[Note == "change", merge_status := "need change"]
df_gaul <- df_gaul[Note == "change", merge_status := "need change"]
# for manual add location, change merge status to fuzzy success
df_gadm <- df_gadm[Note %in% c("manual add","match"), merge_status := "manually match"]
df_gaul <- df_gaul[Note %in% c("manual add", "match"), merge_status := "manually match"]
#recalculate the not-matching percentage
gaul_afr_countries <- unique(df_gaul$ADM0_NAME.x)
gadm_afr_countries <- unique(df_gadm$ADM0_NAME.x)
percent_not_match_gaul <- c()
for (i in 1:length(gaul_afr_countries)){
percent_not_match_gaul[i] <- nrow(df_gaul[!(merge_status %in% c("in WHO but not shpfile", "need change")) & ADM0_NAME.x == gaul_afr_countries[i]])*100/nrow(df_gaul[ADM0_NAME.x == gaul_afr_countries[i]])
}
percent_not_match_gaul <- as.data.table(cbind(gaul_afr_countries, percent_not_match_gaul))
percent_not_match_gadm <- c()
for (i in 1:length(gadm_afr_countries)){
percent_not_match_gadm[i] <- nrow(df_gadm[!(merge_status %in% c("in WHO but not shpfile", "need change")) & ADM0_NAME.x == gadm_afr_countries[i]])*100/nrow(df_gadm[ADM0_NAME.x == gadm_afr_countries[i]])
}
percent_not_match_gadm <- as.data.table(cbind(gadm_afr_countries, percent_not_match_gadm))
View(percent_not_match_gaul)
df_gaul <- fread(paste0(input_dir, "matching_adm1_gaul_Africa.csv"))
df_gadm <- fread(paste0(input_dir, "matching_adm1_gadm_Africa.csv"))
#remove duplicate in fuzzy need fix
df_gaul <- df_gaul[Note != "r", ]
df_gadm <- df_gadm[Note != "r", ]
# for wrong fuzzy match, change merge status to need change
df_gadm <- df_gadm[Note == "change", merge_status := "need change"]
df_gaul <- df_gaul[Note == "change", merge_status := "need change"]
# for manual add location, change merge status to fuzzy success
df_gadm <- df_gadm[Note %in% c("manual add","match"), merge_status := "manually match"]
df_gaul <- df_gaul[Note %in% c("manual add", "match"), merge_status := "manually match"]
#recalculate the not-matching percentage
gaul_afr_countries <- unique(df_gaul$ADM0_NAME.x)
gadm_afr_countries <- unique(df_gadm$ADM0_NAME.x)
percent_not_match_gaul <- c()
for (i in 1:length(gaul_afr_countries)){
percent_not_match_gaul[i] <- nrow(df_gaul[!(merge_status %in% c("in WHO but not shpfile", "need change")) & ADM0_NAME.x == gaul_afr_countries[i]])*100/nrow(df_gaul[ADM0_NAME.x == gaul_afr_countries[i]])
}
percent_not_match_gaul <- as.data.table(cbind(gaul_afr_countries, percent_not_match_gaul))
percent_not_match_gadm <- c()
for (i in 1:length(gadm_afr_countries)){
percent_not_match_gadm[i] <- nrow(df_gadm[!(merge_status %in% c("in WHO but not shpfile", "need change")) & ADM0_NAME.x == gadm_afr_countries[i]])*100/nrow(df_gadm[ADM0_NAME.x == gadm_afr_countries[i]])
}
percent_not_match_gadm <- as.data.table(cbind(gadm_afr_countries, percent_not_match_gadm))
View(percent_not_match_gaul)
View(percent_not_match_gadm)
#load gadm and gaul matching shapefile
df_gaul <- fread(paste0(input_dir, "matching_adm2_gadmupdate_Africa.csv"))
df_gadm <- fread(paste0(input_dir, "matching_adm2_gaulupdate_Africa.csv"))
#remove duplicate in fuzzy need fix
df_gaul <- df_gaul[Note != "r", ]
df_gadm <- df_gadm[Note != "r", ]
# for wrong fuzzy match, change merge status to need change
df_gadm <- df_gadm[Note == "change", merge_status := "need change"]
df_gaul <- df_gaul[Note == "change", merge_status := "need change"]
# for manual add location, change merge status to fuzzy success
df_gadm <- df_gadm[Note %in% c("manual add","match"), merge_status := "manually match"]
df_gaul <- df_gaul[Note %in% c("manual add", "match"), merge_status := "manually match"]
#recalculate the not-matching percentage
gaul_afr_countries <- unique(df_gaul$ADM0_NAME.x)
gadm_afr_countries <- unique(df_gadm$ADM0_NAME.x)
percent_not_match_gaul <- c()
for (i in 1:length(gaul_afr_countries)){
percent_not_match_gaul[i] <- nrow(df_gaul[!(merge_status %in% c("in WHO but not shpfile", "need change")) & ADM0_NAME.x == gaul_afr_countries[i]])*100/nrow(df_gaul[ADM0_NAME.x == gaul_afr_countries[i]])
}
percent_not_match_gaul <- as.data.table(cbind(gaul_afr_countries, percent_not_match_gaul))
percent_not_match_gadm <- c()
for (i in 1:length(gadm_afr_countries)){
percent_not_match_gadm[i] <- nrow(df_gadm[!(merge_status %in% c("in WHO but not shpfile", "need change")) & ADM0_NAME.x == gadm_afr_countries[i]])*100/nrow(df_gadm[ADM0_NAME.x == gadm_afr_countries[i]])
}
percent_not_match_gadm <- as.data.table(cbind(gadm_afr_countries, percent_not_match_gadm))
View(percent_not_match_gadm)
View(percent_not_match_gaul)
#load gadm and gaul matching shapefile
df_gaul <- fread(paste0(input_dir, "matching_adm2_gaulupdate_Africa.csv"))
df_gadm <- fread(paste0(input_dir, "matching_adm2_gadmupdate_Africa.csv"))
#remove duplicate in fuzzy need fix
df_gaul <- df_gaul[Note != "r", ]
df_gadm <- df_gadm[Note != "r", ]
# for wrong fuzzy match, change merge status to need change
df_gadm <- df_gadm[Note == "change", merge_status := "need change"]
df_gaul <- df_gaul[Note == "change", merge_status := "need change"]
# for manual add location, change merge status to fuzzy success
df_gadm <- df_gadm[Note %in% c("manual add","match"), merge_status := "manually match"]
df_gaul <- df_gaul[Note %in% c("manual add", "match"), merge_status := "manually match"]
#recalculate the not-matching percentage
gaul_afr_countries <- unique(df_gaul$ADM0_NAME.x)
gadm_afr_countries <- unique(df_gadm$ADM0_NAME.x)
percent_not_match_gaul <- c()
for (i in 1:length(gaul_afr_countries)){
percent_not_match_gaul[i] <- nrow(df_gaul[!(merge_status %in% c("in WHO but not shpfile", "need change")) & ADM0_NAME.x == gaul_afr_countries[i]])*100/nrow(df_gaul[ADM0_NAME.x == gaul_afr_countries[i]])
}
percent_not_match_gaul <- as.data.table(cbind(gaul_afr_countries, percent_not_match_gaul))
percent_not_match_gadm <- c()
for (i in 1:length(gadm_afr_countries)){
percent_not_match_gadm[i] <- nrow(df_gadm[!(merge_status %in% c("in WHO but not shpfile", "need change")) & ADM0_NAME.x == gadm_afr_countries[i]])*100/nrow(df_gadm[ADM0_NAME.x == gadm_afr_countries[i]])
}
percent_not_match_gadm <- as.data.table(cbind(gadm_afr_countries, percent_not_match_gadm))
View(percent_not_match_gaul)
#load gadm and gaul matching shapefile
df_gaul <- fread(paste0(input_dir, "matching_adm2_gaulupdate_Africa.csv"))
df_gadm <- fread(paste0(input_dir, "matching_adm2_gadmupdate_Africa.csv"))
#remove duplicate in fuzzy need fix
df_gaul <- df_gaul[Note != "r", ]
df_gadm <- df_gadm[Note != "r", ]
# for wrong fuzzy match, change merge status to need change
df_gadm <- df_gadm[Note == "change", merge_status := "need change"]
df_gaul <- df_gaul[Note == "change", merge_status := "need change"]
# for manual add location, change merge status to fuzzy success
df_gadm <- df_gadm[Note %in% c("manual add","match"), merge_status := "manually match"]
df_gaul <- df_gaul[Note %in% c("manual add", "match"), merge_status := "manually match"]
#recalculate the not-matching percentage
gaul_afr_countries <- unique(df_gaul$ADM0_NAME.x)
gadm_afr_countries <- unique(df_gadm$ADM0_NAME.x)
percent_match_gaul <- c()
for (i in 1:length(gaul_afr_countries)){
percent_match_gaul[i] <- nrow(df_gaul[!(merge_status %in% c("in WHO but not shpfile", "need change")) & ADM0_NAME.x == gaul_afr_countries[i]])*100/nrow(df_gaul[ADM0_NAME.x == gaul_afr_countries[i]])
}
percent_match_gaul <- as.data.table(cbind(gaul_afr_countries, percent_match_gaul))
percent_match_gadm <- c()
for (i in 1:length(gadm_afr_countries)){
percent_match_gadm[i] <- nrow(df_gadm[!(merge_status %in% c("in WHO but not shpfile", "need change")) & ADM0_NAME.x == gadm_afr_countries[i]])*100/nrow(df_gadm[ADM0_NAME.x == gadm_afr_countries[i]])
}
percent_match_gadm <- as.data.table(cbind(gadm_afr_countries, percent_match_gadm))
#load gadm and gaul matching shapefile
df_gaul <- fread(paste0(input_dir, "matching_adm2_gaulupdate_Africa.csv"))
df_gadm <- fread(paste0(input_dir, "matching_adm2_gadmupdate_Africa.csv"))
#remove duplicate in fuzzy need fix
df_gaul <- df_gaul[Note != "r", ]
df_gadm <- df_gadm[Note != "r", ]
# for wrong fuzzy match, change merge status to need change
df_gadm <- df_gadm[Note == "change", merge_status := "need change"]
df_gaul <- df_gaul[Note == "change", merge_status := "need change"]
# for manual add location, change merge status to fuzzy success
df_gadm <- df_gadm[Note %in% c("manual add","match"), merge_status := "manually match"]
df_gaul <- df_gaul[Note %in% c("manual add", "match"), merge_status := "manually match"]
#recalculate the not-matching percentage
gaul_afr_countries <- unique(df_gaul$ADM0_NAME.x)
gadm_afr_countries <- unique(df_gadm$ADM0_NAME.x)
percent_match_gaul <- c()
for (i in 1:length(gaul_afr_countries)){
percent_match_gaul[i] <- nrow(df_gaul[!(merge_status %in% c("in WHO but not shpfile", "need change")) & ADM0_NAME.x == gaul_afr_countries[i]])*100/nrow(df_gaul[ADM0_NAME.x == gaul_afr_countries[i]])
}
percent_match_gaul <- as.data.table(cbind(gaul_afr_countries, percent_match_gaul))
percent_match_gadm <- c()
for (i in 1:length(gadm_afr_countries)){
percent_match_gadm[i] <- nrow(df_gadm[!(merge_status %in% c("in WHO but not shpfile", "need change")) & ADM0_NAME.x == gadm_afr_countries[i]])*100/nrow(df_gadm[ADM0_NAME.x == gadm_afr_countries[i]])
}
percent_match_gadm <- as.data.table(cbind(gadm_afr_countries, percent_match_gadm))
View(df_gaul)
percent_match_gaul <- c()
for (i in 1:length(gaul_afr_countries)){
percent_match_gaul[i] <- nrow(df_gaul[!(merge_status %in% c("in WHO but not shpfile", "need change")) & ADM0_NAME.x == gaul_afr_countries[i]])*100/nrow(df_gaul[ADM0_NAME.x == gaul_afr_countries[i]])
}
percent_match_gaul <- as.data.table(cbind(gaul_afr_countries, percent_match_gaul))
View(percent_not_match_gaul)
percent_match_gaul <- c()
for (i in 1:length(gaul_afr_countries)){
percent_match_gaul[i] <- nrow(df_gaul[!(merge_status %in% c("in WHO but not shpfile", "need change")) & ADM0_NAME.x == gaul_afr_countries[i]])*100/nrow(df_gaul[ADM0_NAME.x == gaul_afr_countries[i]])
}
percent_match_gaul <- as.data.table(cbind(gaul_afr_countries, percent_match_gaul))
percent_match_gadm <- c()
for (i in 1:length(gadm_afr_countries)){
percent_match_gadm[i] <- nrow(df_gadm[!(merge_status %in% c("in WHO but not shpfile", "need change")) & ADM0_NAME.x == gadm_afr_countries[i]])*100/nrow(df_gadm[ADM0_NAME.x == gadm_afr_countries[i]])
}
percent_match_gadm <- as.data.table(cbind(gadm_afr_countries, percent_match_gadm))
View(percent_not_match_gaul)
View(percent_not_match_gadm)
#load gadm and gaul matching shapefile
df_gaul <- fread(paste0(input_dir, "matching_adm2_gaulupdate_Africa.csv"))
df_gadm <- fread(paste0(input_dir, "matching_adm2_gadmupdate_Africa.csv"))
percent_match_gaul <- c()
for (i in 1:length(gaul_afr_countries)){
percent_match_gaul[i] <- nrow(df_gaul[!(merge_status %in% c("in WHO but not shpfile", "need change")) & ADM0_NAME.x == gaul_afr_countries[i]])*100/nrow(df_gaul[ADM0_NAME.x == gaul_afr_countries[i]])
}
percent_match_gaul <- as.data.table(cbind(gaul_afr_countries, percent_match_gaul))
percent_match_gadm <- c()
for (i in 1:length(gadm_afr_countries)){
percent_match_gadm[i] <- nrow(df_gadm[!(merge_status %in% c("in WHO but not shpfile", "need change")) & ADM0_NAME.x == gadm_afr_countries[i]])*100/nrow(df_gadm[ADM0_NAME.x == gadm_afr_countries[i]])
}
percent_match_gadm <- as.data.table(cbind(gadm_afr_countries, percent_match_gadm))
View(percent_not_match_gaul)
df_gaul <- fread(paste0(input_dir, "matching_adm2_gaulupdate_Africa.csv"))
df_gadm <- fread(paste0(input_dir, "matching_adm2_gadmupdate_Africa.csv"))
gaul_afr_countries <- unique(df_gaul$ADM0_NAME.x)
gadm_afr_countries <- unique(df_gadm$ADM0_NAME.x)
percent_match_gaul <- c()
for (i in 1:length(gaul_afr_countries)){
percent_match_gaul[i] <- nrow(df_gaul[!(merge_status %in% c("in WHO but not shpfile", "need change")) & ADM0_NAME.x == gaul_afr_countries[i]])*100/nrow(df_gaul[ADM0_NAME.x == gaul_afr_countries[i]])
}
percent_match_gaul <- as.data.table(cbind(gaul_afr_countries, percent_match_gaul))
percent_match_gadm <- c()
for (i in 1:length(gadm_afr_countries)){
percent_match_gadm[i] <- nrow(df_gadm[!(merge_status %in% c("in WHO but not shpfile", "need change")) & ADM0_NAME.x == gadm_afr_countries[i]])*100/nrow(df_gadm[ADM0_NAME.x == gadm_afr_countries[i]])
}
percent_match_gadm <- as.data.table(cbind(gadm_afr_countries, percent_match_gadm))
View(percent_not_match_gaul)
View(percent_not_match_gadm)
#load gadm and gaul matching shapefile
df_gaul <- fread(paste0(input_dir, "matching_adm2_gaulupdate_Africa.csv"))
df_gadm <- fread(paste0(input_dir, "matching_adm2_gadmupdate_Africa.csv"))
percent_match_gaul <- c()
for (i in 1:length(gaul_afr_countries)){
percent_match_gaul[i] <- nrow(df_gaul[!(merge_status %in% c("in WHO but not shpfile", "need change")) & ADM0_NAME.x == gaul_afr_countries[i]])*100/nrow(df_gaul[ADM0_NAME.x == gaul_afr_countries[i]])
}
percent_match_gaul <- as.data.table(cbind(gaul_afr_countries, percent_match_gaul))
percent_match_gadm <- c()
for (i in 1:length(gadm_afr_countries)){
percent_match_gadm[i] <- nrow(df_gadm[!(merge_status %in% c("in WHO but not shpfile", "need change")) & ADM0_NAME.x == gadm_afr_countries[i]])*100/nrow(df_gadm[ADM0_NAME.x == gadm_afr_countries[i]])
}
percent_match_gadm <- as.data.table(cbind(gadm_afr_countries, percent_match_gadm))
View(percent_not_match_gaul)
View(percent_not_match_gadm)
gaul_afr_countries <- unique(df_gaul$ADM0_NAME.x)
gadm_afr_countries <- unique(df_gadm$ADM0_NAME.x)
percent_match_gaul <- c()
for (i in 1:length(gaul_afr_countries)){
percent_match_gaul[i] <- nrow(df_gaul[!(merge_status %in% c("in WHO but not shpfile", "need change")) & ADM0_NAME.x == gaul_afr_countries[i]])*100/nrow(df_gaul[ADM0_NAME.x == gaul_afr_countries[i]])
}
percent_match_gaul <- as.data.table(cbind(gaul_afr_countries, percent_match_gaul))
percent_match_gadm <- c()
for (i in 1:length(gadm_afr_countries)){
percent_match_gadm[i] <- nrow(df_gadm[!(merge_status %in% c("in WHO but not shpfile", "need change")) & ADM0_NAME.x == gadm_afr_countries[i]])*100/nrow(df_gadm[ADM0_NAME.x == gadm_afr_countries[i]])
}
percent_match_gadm <- as.data.table(cbind(gadm_afr_countries, percent_match_gadm))
View(percent_not_match_gadm)
